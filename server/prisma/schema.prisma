// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  roleId   String

  role      Role        @relation(fields: [roleId], references: [id])
  testCases TestCase[]
  extraData ExtraData[]
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  extraData ExtraData[]
}

model TestCase {
  id          String         @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  type        VisibilityType @default(GENERAL)
  project     String?
  status      Status         @default(DRAFT)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  xmlContent  String?
  jsonContent Json?

  extraData   ExtraData[]
  Attachments String[]

  testCaseWorkflow TestCaseWorkflow? @relation("TestCaseToWorkflow")
}

model TestCaseWorkflow {
  id         String   @id @default(uuid())
  testCaseId String   @unique
  testCase   TestCase @relation("TestCaseToWorkflow", fields: [testCaseId], references: [id])

  workflowId String   @db.VarChar(100)
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model ExtraData {
  id         String @id @default(uuid())
  testCaseId String
  nodeId     String
  userId     String
  roleId     String

  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  testCase TestCase @relation(fields: [testCaseId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])

  @@unique([testCaseId, nodeId, userId, roleId])
}

enum VisibilityType {
  GENERAL
  ROLE_BASED
}

enum Status {
  DRAFT
  SUBMITTED
  DONE
  CANCELLED
}
